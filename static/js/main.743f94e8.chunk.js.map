{"version":3,"sources":["components/Form1.js","components/Navbar.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Form1","props","useState","text","setText","className","textArea","htmlFor","value","onChange","event","target","id","rows","type","onClick","newText","toUpperCase","newText2","toLowerCase","text3","replace","trim","split","length","Navbar","mode","href","title","AboutText","toggleMode","role","About","color","backgroundColor","myStyle","setmystyle","btntext","setBtnText","style","App","setMode","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.743f94e8.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function Form1(props) {\r\n    const handleUpClick =()=>\r\n    {\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText=text.toUpperCase();\r\n        \r\n\r\n        setText(newText)\r\n        \r\n        \r\n    }\r\n    const handleUpClick1 =()=>\r\n    {\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText2=text.toLowerCase();\r\n        \r\n        \r\n\r\n        setText(newText2)\r\n        \r\n        \r\n    }\r\n    const handleUpClick2 =()=>\r\n    {\r\n        //console.log(\"Uppercase was clicked\" + text);\r\n        let newText2=\"\";\r\n        \r\n        \r\n\r\n        setText(newText2)\r\n        \r\n        \r\n    }\r\n    const RemoveSpace =()=>\r\n    {\r\n        \r\n        const text3 = text.replace(/\\s+/g, ' ').trim();\r\n        \r\n        \r\n\r\n        setText(text3)\r\n        \r\n        \r\n    }\r\n    const handleOnChange =(event)=>\r\n    {\r\n        //console.log(\"OnChange\");\r\n        setText(event.target.value)\r\n        \r\n    }\r\n    const [text,setText]=useState('Enter text here');\r\n\r\n    return (\r\n        <div>\r\n           <div className=\"container\" >\r\n               <h1>{props.textArea}</h1>\r\n           <div className=\"mb-3\">\r\n              <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"></label>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange}  id=\"textarea\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button type=\"button\" onClick={handleUpClick} className=\"btn btn-primary mx-3\"  >ConvertToUppercase</button>\r\n            <button type=\"button\" onClick={handleUpClick1} className=\"btn btn-primary mx-3\"  >ConvertToLowercase</button>\r\n            <button type=\"button\" onClick={handleUpClick2} className=\"btn btn-primary mx-3\"  >Clear Text</button>\r\n            <button type=\"button\" onClick={RemoveSpace} className=\"btn btn-primary mx-3\"  >Remove Extra Space</button>\r\n           </div>\r\n           <div className=\"container my-3\">\r\n               <h2>Your text Summary</h2>\r\n               <p1>{text.split(\" \").length} words {text.length} characters</p1>\r\n\r\n           </div>\r\n           <div className=\"container my-3\" >\r\n               <h2>Preview</h2>\r\n               <p>{text}</p>\r\n           </div>\r\n           \r\n            \r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n \r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">{props.AboutText}</a>\r\n        </li>\r\n        \r\n        \r\n      </ul>\r\n     \r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode}  type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n     \r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n","import React ,{useState}from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle,setmystyle]=useState(\r\n        {\r\n            color:'white',\r\n            backgroundColor:'black'\r\n        }\r\n    )\r\n    const [btntext,setBtnText]=useState(\"Enable White Mode\")\r\n    const toggleStyle=()=>{\r\n        if(myStyle.color==='white')\r\n        {\r\n            setmystyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n        else{\r\n            setmystyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText(\"Enable white Mode\")\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <div className=\"container\">\r\n                <h1>About Us</h1>\r\n            </div>\r\n             <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">   \r\n      <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> \r\n<div className=\"container\">\r\n<button type=\"button\" onClick={toggleStyle}  className=\"btn btn-primary mx-3 my-3\"  > {btntext} </button>\r\n</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\n//import About from './components/About';\nimport Form1 from './components/Form1';\nimport Navbar from './components/Navbar';\nimport React, { useState } from 'react'\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const toggleMode=()=>\n  {\n    if(mode==='light')\n    {\n      setMode('grey')\n      document.body.style.backgroundColor = 'grey';\n    }\n    else\n    {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n    }\n      \n  }\n  return (\n   <>\n   <Router>\n   <Navbar title=\"Textutils1\"  mode={mode} toggleMode={toggleMode} AboutText=\"About Textutils\" />\n   \n   <div className=\"container my-3\">\n   <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          \n          \n          <Route exact  path=\"/\">\n              <Form1 textArea=\"Enter your Text here\"  /> \n            \n          </Route>\n    </Switch>\n    </div>\n    </Router>\n   {/*<About/>*/}\n   \n   \n    \n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}